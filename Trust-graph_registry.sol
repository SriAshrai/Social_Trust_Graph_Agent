// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title TrustGraphRegistry
 * @dev A smart contract to store cryptographic hashes of the Social Trust Graph's state on-chain.
 * This acts as an immutable record of the graph's integrity and evolution over time.
 * This contract does NOT store the graph data itself, only its verifiable hash.
 */
contract TrustGraphRegistry {

    // Struct to define the data stored for each graph state entry.
    // session_id is a unique identifier for a batch update or specific graph state.
    struct GraphStateEntry {
        bytes32 graphHash;       // Cryptographic hash of the entire trust graph state (generated off-chain)
        uint256 timestamp;       // Timestamp of when the graph hash was recorded
        address recordedBy;      // Address of the entity (e.g., the agent's smart contract or authorized EOA) that recorded the hash
    }

    // Mapping from a unique session ID (bytes32) to its GraphStateEntry.
    // This allows for efficient lookup of specific graph states.
    mapping(bytes32 => GraphStateEntry) public graphStates;

    // Event emitted when a new graph hash is recorded.
    // Useful for off-chain services to easily monitor graph updates.
    event GraphHashRecorded(
        bytes32 indexed sessionId,
        bytes32 graphHash,
        uint256 timestamp,
        address recordedBy
    );

    // Modifier to restrict access to functions, ensuring only authorized entities can record graph hashes.
    // In a full system, this would likely be an Agent Management contract or a DAO.
    address public owner; // Simplistic owner for now, would be a more robust access control in production.

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    /**
     * @dev Records a cryptographic hash of the Social Trust Graph's state on-chain.
     * This function should only be callable by the authorized Social Trust Graph Agent.
     * @param _sessionId A unique identifier for this particular graph update session or state snapshot.
     * @param _graphHash The cryptographic hash of the trust graph's current state (generated by GraphProcessor).
     */
    function recordGraphHash(
        bytes32 _sessionId,
        bytes32 _graphHash
    ) external onlyOwner {
        require(graphStates[_sessionId].timestamp == 0, "Graph hash for this session ID already recorded");
        require(_graphHash != 0x0, "Graph hash cannot be zero"); // Basic validation

        graphStates[_sessionId] = GraphStateEntry({
            graphHash: _graphHash,
            timestamp: block.timestamp,
            recordedBy: msg.sender
        });

        emit GraphHashRecorded(
            _sessionId,
            _graphHash,
            block.timestamp,
            msg.sender
        );
    }

    /**
     * @dev Retrieves the GraphStateEntry for a given session ID.
     * @param _sessionId The unique identifier of the graph update session.
     * @return A tuple containing the stored graph hash and metadata.
     */
    function getGraphState(bytes32 _sessionId)
        external
        view
        returns (
            bytes32 graphHash,
            uint256 timestamp,
            address recordedBy
        )
    {
        GraphStateEntry storage entry = graphStates[_sessionId];
        require(entry.timestamp != 0, "Graph state not found for this session ID");

        return (
            entry.graphHash,
            entry.timestamp,
            entry.recordedBy
        );
    }
}
